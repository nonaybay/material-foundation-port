@use 'sass:color';
@use 'sass:math';
@use 'math' as lmath;
@use 'color.constants' as *;



@function get-r($c) {
  @return color.red($c);
}

@function get-g($c) {
  @return color.green($c);
}

@function get-b($c) {
  @return color.blue($c);
}

@function linearized($x) {
  $n: math.div($x, $MAX_RGB);

  @if ($n <=$BETADELTA) {
    @return (math.div($n, $DELTA) * 100);
  } @else {
    @return (math.pow(math.div(($n + $MIN_ALPHA), $MAX_ALPHA), $MAX_GAMMA) * 100);
  }
}

@function delinearized($x) {
  $n: math.div($x, 100);
  $d: 0;

  @if ($n <= $BETA) {
    $d: ($n * $DELTA);
  } @else {
    $d: ($MAX_GAMMA * math.pow($n, math.div($INT, $MAX_GAMMA)) - $MIN_GAMMA);
  }

  @return math.clamp(0, ($d * $MAX_RGB), $MAX_RGB);
}

@function lab-f($t) {
  $e: math.div(216, 24389);
  $k: math.div(24389, 27);

  @if ($t > $e) {
    @return math.pow($t, math.div(1, 3));
  } @else {
    @return math.div(($k * $t + 16), 116);
  }
}

@function lab-f-inv($ft) {
  $e: math.div(216, 24389);
  $k: math.div(24389, 27);
  $ft3: math.pow($ft, 3);

  @if ($ft3 > $e) {
    @return $ft3;
  } @else {
    @return math.div((116 * $ft - 16), $k);
  }
}

@function xyz-from-rgb($rgb) {
  $r: linearized(get-r($rgb));
  $g: linearized(get-g($rgb));
  $b: linearized(get-b($rgb));
  $m: (($r, $g, $b,),);

  @return lmath.matrix-multiply($m, $SRGB_XYZ);
}

@function lab-from-rgb($rgb) {
  $lr: linearized(get-r($rgb));
  $lg: linearized(get-g($rgb));
  $lb: linearized(get-b($rgb));
  $m: $SRGB_XYZ;

  $x: lmath.gm($m, 1, 1) * $lr + lmath.gm($m, 1, 2) * $lg + lmath.gm($m, 1, 3) * $lb;
  $y: lmath.gm($m, 2, 1) * $lr + lmath.gm($m, 2, 2) * $lg + lmath.gm($m, 2, 3) * $lb;
  $z: lmath.gm($m, 3, 1) * $lr + lmath.gm($m, 3, 2) * $lg + lmath.gm($m, 3, 3) * $lb;

  $wp: $WP_D65;

  $xn: math.div($x, lmath.gm($wp, 1, 1));
  $yn: math.div($y, lmath.gm($wp, 1, 2));
  $zn: math.div($z, lmath.gm($wp, 1, 3));

  $fx: lab-f($xn);
  $fy: lab-f($yn);
  $fz: lab-f($zn);

  $LABl: (116 * $fy - 16);
  $LABa: (500 * ($fx - $fy));
  $LABb: (200 * ($fy - $fz));

  $lab-as-matrix: ( ($l, $a, $b, ), );

  @return $lab-as-matrix;
}

@function lstar-from-rgb($rgb) {
  $y: lmath.gm(xyz-from-rgb($rgb), 1, 2);

  @return (116 * lab-f(math.div($y, 100)) - 16);
}
