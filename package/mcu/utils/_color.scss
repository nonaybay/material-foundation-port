@use 'sass:color';
@use 'sass:math';
@use 'math' as lmath;
@use 'color.constants' as *;



@function linearized($x) {
  $n: math.div($x, $MAX_RGB);

  @if ($n <=$BETADELTA) {
    @return (math.div($n, $DELTA) * 100);
  } @else {
    @return (math.pow(math.div(($n + $MIN_ALPHA), $MAX_ALPHA), $MAX_GAMMA) * 100);
  }
}

@function delinearized($x) {
  $n: math.div($x, 100);
  $d: 0;

  @if ($n <= $BETA) {
    $d: ($n * $DELTA);
  } @else {
    $d: ($MAX_GAMMA * math.pow($n, math.div($INT, $MAX_GAMMA)) - $MIN_GAMMA);
  }

  @return math.clamp(0, ($d * $MAX_RGB), $MAX_RGB);
}

@function get-r($c) {
  @return color.red($c);
}

@function get-g($c) {
  @return color.green($c);
}

@function get-b($c) {
  @return color.blue($c);
}

@function xyz-from-rgb($rgb) {
  $r: linearized(get-r($rgb));
  $g: linearized(get-g($rgb));
  $b: linearized(get-b($rgb));
  $m: (($r, $g, $b,),);

  @return lmath.matrix-multiply($m, $SRGB_XYZ);
}

@function lab-f($t) {
  $e: math.div(216, 24389);
  $k: math.div(24389, 27);

  @if ($t > $e) {
    @return math.pow($t, math.div(1, 3));
  } @else {
    @return math.div(($k * $t + 16), 116);
  }
}

@function lab-f-inv($ft) {
  $e: math.div(216, 24389);
  $k: math.div(24389, 27);
  $ft3: math.pow($ft, 3);

  @if ($ft3 > $e) {
    @return $ft3;
  } @else {
    @return math.div((116 * $ft - 16), $k);
  }
}
